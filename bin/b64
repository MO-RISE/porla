#!/usr/bin/env python3

"""
Command line utility tool for processing input from stdin. Each line on the
input stream is base64 encoded with no wrapping and ended with a newline.
"""

# pylint: disable=duplicate-code

import sys
import logging
import warnings
import argparse
from base64 import b64encode, b64decode

import parse

parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("--encode", action="store_true", default=False)
group.add_argument("--decode", action="store_true", default=False)
parser.add_argument(
    "--log-level", type=lambda level: getattr(logging, level), default=logging.WARNING
)
parser.add_argument(
    "input_specification",
    type=str,
    nargs="?",
    default="{input}",
    help="Example: '{timestamp} {data}',"
    "See https://github.com/r1chardj0n3s/parse#format-specification",
)
parser.add_argument(
    "output_specification",
    type=str,
    nargs="?",
    default="{output}",
    help="Example: '{data}',"
    "See https://github.com/r1chardj0n3s/parse#format-specification",
)

args = parser.parse_args()

# Setup logger
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
)
logging.captureWarnings(True)
warnings.filterwarnings("once")

logger = logging.getLogger("b64")

# Compile pattern
input_pattern = parse.compile(args.input_specification)

for line in sys.stdin:
    logger.debug(line)
    res = input_pattern.parse(line.rstrip())

    if not res:
        logger.error(
            "Could not parse line: %s according to the input_specification: %s",
            line,
            args.input_specification,
        )
        continue

    if not "input" in res.named:
        logger.error(
            "Could not find the expected named argument 'input' in the input specification: %s",
            args.input_specification,
        )
        continue

    parts = res.named

    _input = parts.pop("input")
    output = (
        b64encode(_input.encode()).decode()
        if args.encode
        else b64decode(_input.encode()).decode()
    )

    parts["output"] = output

    sys.stdout.write(args.output_specification.format(**parts) + "\n")
    sys.stdout.flush()
