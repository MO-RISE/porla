#!/usr/bin/env python3

"""
Command line utility tool for rate limiting the flow through a pipeline on a line-by-line basis.

"""

# pylint: disable=duplicate-code
# pylint: disable=redefined-outer-name

import sys
import time
import logging
import warnings
import argparse
from collections import defaultdict

import parse

# Parse cli arguments
parser = argparse.ArgumentParser()
parser.add_argument(
    "--log-level", type=lambda level: getattr(logging, level), default=logging.WARNING
)
parser.add_argument(
    "interval", type=float, help="Minimum allowed interval to go through"
)

parser.add_argument(
    "--key",
    type=str,
    default=None,
    help="Example: '{key} {} {}',"
    "See https://github.com/r1chardj0n3s/parse#format-specification",
)


args = parser.parse_args()

# Setup logger
logging.basicConfig(
    format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
)
logging.captureWarnings(True)
warnings.filterwarnings("once")

logger = logging.getLogger("limit")


# Compile pattern
pattern = parse.compile(args.key) if args.key else None


def _get_key(line: str):
    if not args.key:
        return "fixed"

    res = pattern.parse(line.rstrip())

    if not res:
        logger.error(
            "Could not parse line: %s according to the specification: %s",
            line,
            args.key,
        )
        return None

    return res["key"]


# Initialize buffer
buffer = defaultdict(int)  # Will default to 0 (zero)

# Start processing
for line in sys.stdin:
    now = time.monotonic()
    logger.debug(line)

    if key := _get_key(line):
        last_seen = buffer[key]

        if now - last_seen > args.interval:
            buffer[key] = now

            sys.stdout.write(line)
            sys.stdout.flush()

        # else: drop line
    # else: drop line
